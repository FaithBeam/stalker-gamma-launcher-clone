using System.Collections.ObjectModel;
using System.Reactive;
using System.Reactive.Disposables;
using DynamicData;
using ReactiveUI;
using stalker_gamma.core.Services;

namespace stalker_gamma.core.ViewModels.Tabs.ModListTab;

public class ModListTabVm : ViewModelBase, IActivatableViewModel
{
    private readonly string _dir = Path.GetDirectoryName(AppContext.BaseDirectory)!;
    private int _modsActive;
    private int _totalMods;
    private string _modsToolTip = "";

    public ModListTabVm(ProgressService progressService)
    {
        Activator = new ViewModelActivator();
        ModsList = [];
        var mo2ModsFile = Path.Join(_dir, "..", "profiles", "G.A.M.M.A", "modlist.txt");
        GetModListCmd = ReactiveCommand.CreateFromTask(async () =>
        {
            if (!File.Exists(mo2ModsFile))
            {
                progressService.UpdateProgress($"Mods list file not found: {mo2ModsFile}");
                return;
            }

            var modsList = (await File.ReadAllLinesAsync(mo2ModsFile))
                .Where(x => x.StartsWith('-') || x.StartsWith('+'))
                .ToList();
            var separators = modsList
                .Select((x, idx) => (x, idx))
                .Where(x => x.x.EndsWith("_separator"))
                .ToList();
            List<ModNode> modNodes = [];
            modNodes.AddRange(
                from separator in separators
                let sepIdx = separators.IndexOf(separator)
                let start = sepIdx > 0 ? separators[sepIdx - 1].idx + 1 : 0
                let chosen = modsList
                    .GetRange(start, separator.idx - start)
                    .Select(x => new ModNode(x[1..], x.StartsWith('+'), false))
                select new ModNode(
                    separator.x[1..^"_separator".Length],
                    separator.x.StartsWith('+'),
                    separator: true,
                    new ObservableCollection<ModNode>(chosen.Reverse())
                )
            );

            modNodes.Reverse();
            ModsList.Clear();
            ModsList.AddRange(modNodes);
            ModsActive = ModsList.SelectMany(x => x.SubNodes ?? []).Count(x => x.Enabled);
            TotalMods = ModsList.SelectMany(x => x.SubNodes ?? []).Count();
            ModsToolTip = $"""
            Total: {TotalMods}
            Active: {ModsActive}
            Inactive: {ModsList.SelectMany(x => x.SubNodes ?? []).Count(x => !x.Enabled)}
            Separators: {ModsList.Count(x => x.Separator)}
            """;
        });

        SaveCmd = ReactiveCommand.CreateFromTask(async () =>
        {
            await File.WriteAllTextAsync(
                mo2ModsFile,
                $"""
                # This file was automatically generated by Mod Organizer.

                {string.Join('\n', ModsList.Reverse().Select(x => x.ToString()))}
                """
            );
        });

        ModsList.CollectionChanged += (sender, args) =>
        {
            ;
        };

        this.WhenActivated(
            (CompositeDisposable d) =>
            {
                GetModListCmd.Execute().Subscribe();
            }
        );
    }

    public ReactiveCommand<Unit, Unit> GetModListCmd { get; }
    public ReactiveCommand<Unit, Unit> SaveCmd { get; }

    public ObservableCollection<ModNode> ModsList { get; set; }
    public ViewModelActivator Activator { get; }

    public int ModsActive
    {
        get => _modsActive;
        set => this.RaiseAndSetIfChanged(ref _modsActive, value);
    }

    public int TotalMods
    {
        get => _totalMods;
        set => this.RaiseAndSetIfChanged(ref _totalMods, value);
    }

    public string ModsToolTip
    {
        get => _modsToolTip;
        set => this.RaiseAndSetIfChanged(ref _modsToolTip, value);
    }
}
